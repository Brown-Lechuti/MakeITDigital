// <auto-generated />
using System;
using MakeITDigital.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MakeITDigital.Migrations
{
    [DbContext(typeof(MarketMedia))]
    partial class MarketMediaModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MakeITDigital.Models.Location", b =>
                {
                    b.Property<int>("PhotoId")
                        .HasColumnType("int")
                        .HasColumnName("PhotoID");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("ProvinceOrState")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.HasKey("PhotoId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("MakeITDigital.Models.Metum", b =>
                {
                    b.Property<int>("PhotoId")
                        .HasColumnType("int")
                        .HasColumnName("PhotoID");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nchar(500)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("ModStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PhotoId");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("MakeITDigital.Models.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhotoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateUploaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("Photo1")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Photo");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nchar(1000)")
                        .IsFixedLength(true);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PhotoId");

                    b.HasIndex("UserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("MakeITDigital.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PhotoId")
                        .HasColumnType("int")
                        .HasColumnName("PhotoID");

                    b.Property<string>("TaggedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TagId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("MakeITDigital.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength(true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength(true);

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(64)
                        .HasColumnType("binary(64)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("SignUpDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "EmailAddress" }, "unique_email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("MakeITDigital.Models.Location", b =>
                {
                    b.HasOne("MakeITDigital.Models.Photo", "Photo")
                        .WithOne("Location")
                        .HasForeignKey("MakeITDigital.Models.Location", "PhotoId")
                        .HasConstraintName("FK_Location_Photo")
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("MakeITDigital.Models.Metum", b =>
                {
                    b.HasOne("MakeITDigital.Models.Photo", "Photo")
                        .WithOne("Metum")
                        .HasForeignKey("MakeITDigital.Models.Metum", "PhotoId")
                        .HasConstraintName("FK_Meta_Photo")
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("MakeITDigital.Models.Photo", b =>
                {
                    b.HasOne("MakeITDigital.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("User_many_Photos")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeITDigital.Models.Tag", b =>
                {
                    b.HasOne("MakeITDigital.Models.Photo", "Photo")
                        .WithMany("Tags")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_Tag_Photo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("MakeITDigital.Models.Photo", b =>
                {
                    b.Navigation("Location");

                    b.Navigation("Metum");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MakeITDigital.Models.User", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
